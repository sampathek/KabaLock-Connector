package uk.co.noetic.kaba;

import java.net.URL;
import java.util.List;

import javax.xml.namespace.QName;
import javax.xml.ws.BindingProvider;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.handler.Handler;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import uk.co.noetic.util.HeaderHandler;
import uk.co.noetic.util.KabaConfigEnum;
import uk.co.noetic.util.KabaConfigUtils;
import uk.co.noetic.util.KabaUtil;
import uk.co.noetic.util.SOAPLoggingHandler;

/**
 * This class was generated by Apache CXF 2.7.18
 * 2017-10-26T10:26:57.392+05:30
 * Generated source version: 2.7.18
 * 
 */
@WebServiceClient(name = "MessengerPMSWSService", 
                  wsdlLocation = "",
                  targetNamespace = "http://tempuri.org") 
public class MessengerPMSWSService extends Service {

    public final static URL WSDL_LOCATION;
    
    private String targetEnv;

    public final static QName SERVICE = new QName("http://tempuri.org", "MessengerPMSWSService");
    public final static QName MessengerPMSWSServiceSoap12 = new QName("http://tempuri.org", "MessengerPMSWSServiceSoap12");
    public final static QName MessengerPMSWSServiceSoap = new QName("http://tempuri.org", "MessengerPMSWSServiceSoap");
    
    private final static Logger LOGGER = LoggerFactory.getLogger(MessengerPMSWSService.class);
    
    static {
        URL url = null;
        try {
            //url = new URL("file:/C:/Users/sampa/AppData/Local/Temp/tempdir7801692537910433554.tmp/MessengerPMSService_1.wsdl");
            //url = new URL(KabaConfigUtils.getPropValue(KabaConfigEnum.WS_ENDPOINT, "kaba")+"?wsdl");
            url = MessengerPMSWSService.class.getResource("../../../../MessengerPMSService_2.wsdl");
		} catch (Exception e) {
			java.util.logging.Logger.getLogger(MessengerPMSWSService.class.getName()).log(java.util.logging.Level.INFO,
					"Can not initialize the default wsdl {0}", "MessengerPMSService_2.wsdl");
		}
        WSDL_LOCATION = url;
    }

    public MessengerPMSWSService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public MessengerPMSWSService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public MessengerPMSWSService() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    public MessengerPMSWSService(String targetEnv) {
        this();
        this.targetEnv = KabaUtil.getTargetEnv(targetEnv);
    }


    
    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public MessengerPMSWSService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public MessengerPMSWSService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public MessengerPMSWSService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     *
     * @return
     *     returns MessengerPMSWSServiceSoap
     */
    @WebEndpoint(name = "MessengerPMSWSServiceSoap12")
    public MessengerPMSWSServiceSoap getMessengerPMSWSServiceSoap12() {
        return super.getPort(MessengerPMSWSServiceSoap12, MessengerPMSWSServiceSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns MessengerPMSWSServiceSoap
     */
    @WebEndpoint(name = "MessengerPMSWSServiceSoap12")
    public MessengerPMSWSServiceSoap getMessengerPMSWSServiceSoap12(WebServiceFeature... features) {
        return super.getPort(MessengerPMSWSServiceSoap12, MessengerPMSWSServiceSoap.class, features);
    }
    /**
     *
     * @return
     *     returns MessengerPMSWSServiceSoap
     */
    @WebEndpoint(name = "MessengerPMSWSServiceSoap")
    public MessengerPMSWSServiceSoap getMessengerPMSWSServiceSoap(String wsEndpoint, String userName, String password) {
    	MessengerPMSWSServiceSoap port = super.getPort(MessengerPMSWSServiceSoap, MessengerPMSWSServiceSoap.class);
    	BindingProvider provider=(BindingProvider) port;
    	
    	LOGGER.warn("Calling KABA EP: " + wsEndpoint);
    	
        provider.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, wsEndpoint + "?wsdl");
    	
    	List<Handler> handlerChain = provider.getBinding().getHandlerChain();
    	handlerChain.add(new HeaderHandler(userName, password));
    	handlerChain.add(new SOAPLoggingHandler());
    	provider.getBinding().setHandlerChain(handlerChain);
        return port;
    	
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns MessengerPMSWSServiceSoap
     */
    @WebEndpoint(name = "MessengerPMSWSServiceSoap")
    public MessengerPMSWSServiceSoap getMessengerPMSWSServiceSoap(WebServiceFeature... features) {
        return super.getPort(MessengerPMSWSServiceSoap, MessengerPMSWSServiceSoap.class, features);
    }

}
